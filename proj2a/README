NAME: Bonnie Liu
EMAIL: bonnieliu2002@g.ucla.edu
ID: 005300989

QUESTIONS
2.1.1) Causing Conflicts:
-- It takes many iterations before errors are seen because in order for an error to occur, one thread must have been in the process of running add() when interrupted by another thread. Thread 1 would have stored *pointer + value in sum, and Thread 2 would have interrupted. Thread 2 runs add() and updates pointer to *pointer + value. Now Thread 1 will run again, but Thread 1 will just update *pointer to its sum. By having more iterations, we will run the add() function many more times.
-- A significantly smaller number of iterations so seldom fails because then the thread is less likely to be interrupted.

2.1.2) Cost of Yielding:
-- The --yield runs are so much slower because sched_yield() causes the calling thread to relinquish the CPU. This requires context switching, which adds overhead, making --yield runs slower.
-- As mentioned above, the additional time is going toward context switching.
-- It is not possible to get valid per-operation timings if we are using the --yield option because how would we deal with the added time costs of context switching?

2.1.3) Measurement Errors:
-- The average cost per operation drops with increasing iterations because it takes a certain amount of time to create a new thread. Thus, having more iterations means performing more operations per thread, which is a more time-efficient use of the resources.
-- If the cost per iteration is a function of the number of iterations, we know how many iterations to run when the graph seen in lab2_add-3.png starts to level out and reach its horizontal asymptote.

2.1.4) Costs of Serialization
-- All of the options perform similarly for low numbers of threads because there's less overhead. Each thread doesn't have to wait as long to obtain the lock.
-- The three protected operations slow down as the number of threads rises because of the overheads of context switching. Since there are more threads, each thread spends more time waiting for the others to run and release the lock.
