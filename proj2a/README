NAME: Bonnie Liu
EMAIL: bonnieliu2002@g.ucla.edu
ID: 005300989

QUESTIONS
2.1.1) Causing Conflicts:
-- It takes many iterations before errors are seen because in order for an error to occur, one thread must have been in the process of running add() when interrupted by another thread. Thread 1 would have stored *pointer + value in sum, and Thread 2 would have interrupted. Thread 2 runs add() and updates pointer to *pointer + value. Now Thread 1 will run again, but Thread 1 will just update *pointer to its sum. By having more iterations, we will run the add() function many more times.
-- A significantly smaller number of iterations so seldom fails because then the thread is less likely to be interrupted.

2.1.2) Cost of Yielding:
-- The --yield runs are so much slower because sched_yield() causes the calling thread to relinquish the CPU. This requires context switching, which adds overhead, making --yield runs slower.
-- As mentioned above, the additional time is going toward context switching.
-- It is not possible to get valid per-operation timings if we are using the --yield option because how would we deal with the added time costs of context switching?

2.1.3) Measurement Errors:
-- The average cost per operation drops with increasing iterations because it takes a certain amount of time to create a new thread. Thus, having more iterations means performing more operations per thread, which is a more time-efficient use of the resources.
-- If the cost per iteration is a function of the number of iterations, we know how many iterations to run when the graph seen in lab2_add-3.png starts to level out and reach its horizontal asymptote.

2.1.4) Costs of Serialization
-- All of the options perform similarly for low numbers of threads because there's less overhead. Each thread doesn't have to wait as long to obtain the lock.
-- The three protected operations slow down as the number of threads rises because of the overheads of context switching. Since there are more threads, each thread spends more time waiting for the others to run and release the lock.

2.2.1) Scalability of Mutex
For both Part-1 (adds) and Part-2 (sorted lists), the time per mutex-protected operation was lower for a lower number of threads. In Part-1 (adds), the time per mutex-protected operation stayed approximately constant while in Part-2 (sorted lists), the time per mutex-protected operation was linear. This makes sense because if we increase the number of theads, the amount of time each thread has to wait for also increases. For adds, the time per operation also increases, but because it's such a small critical section, the rate of increase is much, much smaller.

2.2.2) Scalability of Spin Locks
-- Based on my graphs, spin locks seem to perform equally well -- if not, better than -- mutex locks when there is a low number of threads, but as the number of threads increases, the time cost per operation for spin locks increases at a faster rate than the time cost per operation for mutex locks. This is because spin locks have to repeatedly check if the lock is available. If there are more locks, then the lock is more likely to be held by another lock, and thus the spin lock has to continue checking. This adds a significant overhead, causing the greater time cost per operation for spin locks.
-- The curve for spin locks in Part-2 (sorted lists) looks linear because how long a thread has to wait for a lock is proportional to the number of threads it has to wait for. The curve for spin locks in Part-1 (adds) starts off gradually but then increases more rapidly once it reaches 4 threads.

CHALLENGES
-- Initially, I tried passing add() as a parameter into pthread_create(), but it turns out that I had to create another function (I called it performAdds()) and pass that as the parameter.
-- I really wanted to avoid using global variables for counter, so I made a struct as described in Chapter 27 of Three Easy Pieces. The pointers got a little confusing, but I was able to figure it out after looking it up on Piazza and Stack Overflow.
-- My Makefile stopped running after an error occurred in one of the test cases, so I had to do make -i tests to ignore the errors and force the Makefile to continue running test cases. Upon consulting Piazza and a TA, I realized that instead of typing make -i tests, I could write -./lab2_list <blah blah blah> to force the Makefile to keep running even after an error is encountered.
-- My test file originally took a really long time to run (around 15 minutes), and I made it a little faster by taking out my helper function Pthread_mutex_lock, which checked if there was an error creating the thread.
-- It also took me some time to figure out how to use the .gp scripts to plot graphs and understand what the scripts were doing.

RESOURCES
-- Format Specifiers: https://www.w3schools.in/c-tutorial/format-specifiers/
-- Optional_argument for getopt_long: https://stackoverflow.com/questions/39966025/understanding-option-long-options-when-using-getopt-long
-- Clock_gettime(2): https://man7.org/linux/man-pages/man2/clock_gettime.2.html
-- POSIX threads: https://computing.llnl.gov/tutorials/pthreads/
-- Non-Scalar Type: https://stackoverflow.com/questions/51855096/error-conversion-to-non-scalar-type-requested
-- Undefined Reference to pthread_create(): https://myeasytuts.com/solved-undefined-reference-to-pthread_create-linux/#:~:text=When%20a%20programmer%20uses%20pthread_create%20function%20program%20to,compiling%20a%20C%20Program%20in%20G%2B%2B%20or%20GCC
-- How to Get Rid of Unused Parameter Warning: https://stackoverflow.com/questions/40776233/how-do-i-get-rid-of-the-unused-parameter-warning-in-c-with-gcc-4-8-4-wunused-p
-- How to Install gnuplot(1): https://zoomadmin.com/HowToInstall/UbuntuPackage/gnuplot
-- .gp() means a gopher project source file: https://www.file-extensions.org/gp-file-extension#:~:text=File%20extension%20gp%20is%20related%20to%20Gofer%20Project,allows%20rapid%20development%20of%20robust%2C%20concise%2C%20correct%20software
-- Gnuplot(1): http://www.gnuplot.info/docs_5.0/gnuplot.pdf
-- Sched_yield(): https://linux.die.net/man/2/sched_yield
-- Dealing with converting seconds to nanoseconds: https://stackoverflow.com/questions/3946842/measuring-time-taken-by-a-function-clock-gettime
-- Atomic Built-Ins: https://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Atomic-Builtins.html
-- Mutex and spinlock: https://attractivechaos.wordpress.com/2011/10/06/multi-threaded-programming-efficiency-of-locking/
-- Malloc() and free(): https://www.geeksforgeeks.org/dynamic-memory-allocation-in-c-using-malloc-calloc-free-and-realloc/
-- Rand(): https://www.tutorialspoint.com/c_standard_library/c_function_rand.htm
-- Extern int for opt_yield: https://jameshfisher.com/2017/08/28/c-extern-function/#:~:text=Applied%20to%20a%20function%20declaration%2C%20the%20extern%20keyword,all%20function%20declarations%20have%20an%20implicit%20extern%20applied%21
-- Make -i Tests: https://stackoverflow.com/questions/2670130/make-how-to-continue-after-a-command-fails
